{"version":3,"sources":["Components/Home/Home.js","Components/Inputs/MuiButton.js","Components/Inputs/MuiCheckbox.js","Components/Inputs/MuiRadioButton.js","Components/ComponentList/ComponentList.js","Components/About/About.js","Components/Layout/Layout.js","theme/theme.js","utils/history.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","MuiButton","children","handleClick","Button","color","variant","onClick","defaultProps","MuiCheckbox","handleChange","checked","label","value","FormControlLabel","control","Checkbox","onChange","name","MuiRadioButton","labelPlacement","isChecked","Radio","checkboxArr","id","ComponentList","useState","checkboxValue","setCheckboxValue","radioValue","setRadioValue","onChangeCheckBox","e","valueAsNumber","Number","target","indexOf","filter","item","onChangeCheckRadio","Typography","Grid","container","map","key","About","Layout","style","height","AppBar","Toolbar","className","themePurple","createMuiTheme","palette","primary","purple","themeRed","red","themeGreen","green","createBrowserHistory","App","ThemeProvider","theme","history","location","pathname","split","CssBaseline","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAaeA,MAVf,SAAcC,GACZ,OACE,6BACE,yD,wCCFN,SAASC,EAAT,GAA+C,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YAC7B,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,QAASJ,GAClDD,IAUTD,EAAUO,aAAe,CACvBL,YAAa,kBAAM,OAGNF,Q,gBClBf,SAASQ,EAAT,GAA+D,IAAxCC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MACnD,OACE,6BACE,kBAACC,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEL,QAASA,EACTM,SAAUP,EACVQ,KAAMN,EACNC,MAAOA,EACPR,MAAM,YAGVO,MAAOA,KAafH,EAAYD,aAAe,CACzBG,SAAS,EACTD,aAAc,kBAAM,OAGPD,Q,QC/Bf,SAASU,EAAT,GAMI,IALFC,EAKC,EALDA,eACAR,EAIC,EAJDA,MACAC,EAGC,EAHDA,MACAH,EAEC,EAFDA,aACAW,EACC,EADDA,UAEA,OACE,oCACE,kBAACP,EAAA,EAAD,CACED,MAAOA,EACPE,QAAS,kBAACO,EAAA,EAAD,CAAOX,QAASU,EAAWhB,MAAM,YAC1CO,MAAOA,EACPQ,eAAgBA,EAChBH,SAAUP,KAclBS,EAAeX,aAAe,CAC5Ba,WAAW,EACXX,aAAc,kBAAM,MACpBU,eAAgB,OAGHD,QC/BTI,EAAc,CAAC,CAAEC,GAAI,EAAGX,MAAO,OAAS,CAAEW,GAAI,EAAGX,MAAO,QAgD/CY,MA9Cf,SAAuBzB,GAAQ,IAAD,EACc0B,mBAAS,IADvB,mBACrBC,EADqB,KACNC,EADM,OAEQF,mBAAS,MAFjB,mBAErBG,EAFqB,KAETC,EAFS,KAItBC,EAAmB,SAAAC,GACvB,IAAMC,EAAgBC,OAAOF,EAAEG,OAAOtB,OAClCc,EAAcS,QAAQH,IAAkB,EAC1CL,EAAiBD,EAAcU,QAAO,SAAAC,GAAI,OAAIA,IAASL,MAEvDL,EAAiB,GAAD,mBAAKD,GAAL,CAAoBO,OAAOD,OAGzCM,EAAqB,SAAAP,GACzBF,EAAcI,OAAOF,EAAEG,OAAOtB,SAGhC,OACE,oCACE,kBAAC2B,EAAA,EAAD,mCACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAAC,EAAD,iBACCnB,EAAYoB,KAAI,SAAAL,GAAI,OACnB,kBAAC,EAAD,CACE5B,aAAcqB,EACda,IAAKN,EAAKd,GACVZ,MAAO0B,EAAKzB,MACZA,MAAOyB,EAAKd,GACZb,QAASgB,EAAcS,QAAQE,EAAKd,KAAO,OAG9CD,EAAYoB,KAAI,SAAAL,GAAI,OACnB,kBAAC,EAAD,CACE5B,aAAc6B,EACdK,IAAKN,EAAKd,GACVZ,MAAO0B,EAAKzB,MACZA,MAAOyB,EAAKd,GACZH,UAAWQ,IAAeS,EAAKd,WChC5BqB,MAVf,SAAe7C,GACb,OACE,6BACE,qD,gBCgBS8C,MAlBf,YAA+B,IAAb5C,EAAY,EAAZA,SAChB,OACE,oCACE,6BAAS6C,MAAO,CAAEC,OAAQ,SACxB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACV,EAAA,EAAD,CAAYlC,QAAQ,MAApB,gBAKN,0BAAM6C,UAAU,kBAAkBjD,K,wCCZ3BkD,EAAcC,YAAe,CACxCC,QAAS,CACPC,QAASC,OAIAC,EAAWJ,YAAe,CACrCC,QAAS,CACPC,QAASG,OAIAC,EAAaN,YAAe,CACvCC,QAAS,CACPC,QAASK,O,gBCfEC,cAAqB,IC2CrBC,MAjCf,SAAa9D,GAUX,OACE,kBAAC+D,EAAA,EAAD,CAAeC,MATXC,EAAQC,SAASC,SAASC,MAAM,KAAKhC,QAAQ,QAAU,EAClDqB,EACEQ,EAAQC,SAASC,SAASC,MAAM,KAAKhC,QAAQ,UAAY,EAC3DuB,EAEFP,GAKL,kBAACiB,EAAA,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,eAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,sBAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,WCzBQC,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ce04a27.chunk.js","sourcesContent":["import React from \"react\";\n// import PropTypes from \"prop-types\";\n\nfunction Home(props) {\n  return (\n    <div>\n      <span>This is the home page</span>\n    </div>\n  );\n}\n\nHome.propTypes = {};\n\nexport default Home;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"@material-ui/core\";\n\nfunction MuiButton({ children, handleClick }) {\n  return (\n    <>\n      <Button color=\"primary\" variant=\"contained\" onClick={handleClick}>\n        {children}\n      </Button>\n    </>\n  );\n}\n\nMuiButton.propTypes = {\n  handleClick: PropTypes.func.isRequired\n};\n\nMuiButton.defaultProps = {\n  handleClick: () => null\n};\n\nexport default MuiButton;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FormControlLabel, Checkbox } from \"@material-ui/core\";\n\nfunction MuiCheckbox({ handleChange, checked, label, value }) {\n  return (\n    <div>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={checked}\n            onChange={handleChange}\n            name={label}\n            value={value}\n            color=\"primary\"\n          />\n        }\n        label={label}\n      />\n    </div>\n  );\n}\n\nMuiCheckbox.propTypes = {\n  handleChange: PropTypes.func,\n  checked: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n};\n\nMuiCheckbox.defaultProps = {\n  checked: false,\n  handleChange: () => null\n};\n\nexport default MuiCheckbox;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FormControlLabel, Radio } from \"@material-ui/core\";\n\nfunction MuiRadioButton({\n  labelPlacement,\n  label,\n  value,\n  handleChange,\n  isChecked\n}) {\n  return (\n    <>\n      <FormControlLabel\n        value={value}\n        control={<Radio checked={isChecked} color=\"primary\" />}\n        label={label}\n        labelPlacement={labelPlacement}\n        onChange={handleChange}\n      />\n    </>\n  );\n}\n\nMuiRadioButton.propTypes = {\n  labelPlacement: PropTypes.string,\n  label: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  handleChange: PropTypes.func,\n  isChecked: PropTypes.bool\n};\n\nMuiRadioButton.defaultProps = {\n  isChecked: false,\n  handleChange: () => null,\n  labelPlacement: \"end\"\n};\n\nexport default MuiRadioButton;\n","import React, { useState } from \"react\";\nimport { Typography, Grid } from \"@material-ui/core\";\nimport Button from \"../Inputs/MuiButton\";\nimport MuiCheckbox from \"../Inputs/MuiCheckbox\";\nimport MuiRadioButton from \"../Inputs/MuiRadioButton\";\n// import PropTypes from \"prop-types\";\n\nconst checkboxArr = [{ id: 1, value: \"Cat\" }, { id: 2, value: \"Dog\" }];\n\nfunction ComponentList(props) {\n  const [checkboxValue, setCheckboxValue] = useState([]);\n  const [radioValue, setRadioValue] = useState(null);\n\n  const onChangeCheckBox = e => {\n    const valueAsNumber = Number(e.target.value);\n    if (checkboxValue.indexOf(valueAsNumber) > -1) {\n      setCheckboxValue(checkboxValue.filter(item => item !== valueAsNumber));\n    } else {\n      setCheckboxValue([...checkboxValue, Number(valueAsNumber)]);\n    }\n  };\n  const onChangeCheckRadio = e => {\n    setRadioValue(Number(e.target.value));\n  };\n\n  return (\n    <>\n      <Typography>These are some compontents</Typography>\n      <Grid container>\n        <Button>Click me</Button>\n        {checkboxArr.map(item => (\n          <MuiCheckbox\n            handleChange={onChangeCheckBox}\n            key={item.id}\n            label={item.value}\n            value={item.id}\n            checked={checkboxValue.indexOf(item.id) > -1}\n          />\n        ))}\n        {checkboxArr.map(item => (\n          <MuiRadioButton\n            handleChange={onChangeCheckRadio}\n            key={item.id}\n            label={item.value}\n            value={item.id}\n            isChecked={radioValue === item.id}\n          />\n        ))}\n      </Grid>\n    </>\n  );\n}\n\nComponentList.propTypes = {};\n\nexport default ComponentList;\n","import React from \"react\";\n// import PropTypes from \"prop-types\";\n\nfunction About(props) {\n  return (\n    <div>\n      <span>this is the About</span>\n    </div>\n  );\n}\n\n// About.propTypes = {};\n\nexport default About;\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n// import PropTypes from 'prop-types'\n\nfunction Layout({ children }) {\n  return (\n    <>\n      <section style={{ height: \"64px\" }}>\n        <AppBar>\n          <Toolbar>\n            <Typography variant=\"h6\">Watch!Eat</Typography>\n          </Toolbar>\n        </AppBar>\n      </section>\n\n      <main className=\"main-container\">{children}</main>\n    </>\n  );\n}\n\nLayout.propTypes = {};\n\nexport default Layout;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport { purple, red, green } from \"@material-ui/core/colors\";\n\nexport const themePurple = createMuiTheme({\n  palette: {\n    primary: purple\n  }\n});\n\nexport const themeRed = createMuiTheme({\n  palette: {\n    primary: red\n  }\n});\n\nexport const themeGreen = createMuiTheme({\n  palette: {\n    primary: green\n  }\n});\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory({\n  /* pass a configuration object here if needed */\n});\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./Components/Home/Home\";\nimport ComponentList from \"./Components/ComponentList/ComponentList\";\nimport About from \"./Components/About/About\";\nimport Layout from \"./Components/Layout/Layout\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport { themeGreen, themePurple, themeRed } from \"./theme/theme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport history from \"./utils/history\";\n\nfunction App(props) {\n  const switchTheme = () => {\n    if (history.location.pathname.split(\"/\").indexOf(\"red\") > -1) {\n      return themeRed;\n    } else if (history.location.pathname.split(\"/\").indexOf(\"green\") > -1) {\n      return themeGreen;\n    }\n    return themePurple;\n  };\n\n  return (\n    <ThemeProvider theme={switchTheme()}>\n      <CssBaseline />\n      <Layout>\n        <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/components\">\n            <ComponentList />\n          </Route>\n          <Route exact path=\"/components/:color\">\n            <ComponentList />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Layout>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}